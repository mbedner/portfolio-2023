import Head from "next/head";
import client from "../lib/apollo";
import { gql } from "@apollo/client";

import Banner from "@/components/global/Banner";
import Footer from "@/components/global/Footer";
import Header from "@/components/global/HeaderHome";
import Hero from "@/components/home/Hero";
import LatestWork from "@/components/home/LatestWork";
import Companies from "@/components/home/Companies";
import Skills from "@/components/home/Skills";
import Portfolio from "@/components/home/portfolio/Portfolio";
import Testimonial from "@/components/home/testimonial/Testimonial";
import About from "@/components/home/About";

export default function Home({ homepage, projects }) {
  return (
    <>
      <Head>
        <title>Mark Bedner - Product Designer</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link href="https://fonts.cdnfonts.com/css/satoshi" rel="stylesheet" />
      </Head>
      <Banner />
      <Header />
      <main>
        <Hero
          heading={homepage.hero.heading}
          subheading={homepage.hero.subheading}
          bodyText={homepage.hero.bodyText}
        />
        <LatestWork />
        <Companies />
        <Skills skillsCopy={homepage.skills} skills={homepage.skills.skills} />
        <Portfolio projects={projects} />
        <About
          heading={homepage.about.heading}
          bodyText={homepage.about.bodyText}
        />
        <Testimonial />
      </main>
      <Footer heading={homepage.cta.heading} bodyText={homepage.cta.bodyText} />
    </>
  );
}

// test multiple queries inside same getstaticprops component

export async function getStaticProps() {
  const GET_HOMEPAGE = gql`
    query GetHomepageData {
      page(id: "51", idType: DATABASE_ID) {
        homepage {
          about {
            bodyText
            heading
          }
          cta {
            bodyText
            heading
          }
          hero {
            bodyText
            heading
            subheading
          }
          skills {
            bodyText
            headline
            skills {
              skillBody1
              skillBody2
              skillBody3
              skillHeading1
              skillHeading2
              skillHeading3
            }
          }
        }
      }
    }
  `;

  const GET_PROJECTS = gql`
    query GetProjectsData {
      projects {
        nodes {
          title
          uri
          id
          project {
            introduction
            thumbnail {
              sourceUrl
            }
            company {
              companyMark {
                sourceUrl
              }
            }
          }
        }
      }
    }
  `;

  const homepageQuery = client.query({
    query: GET_HOMEPAGE,
  });

  const projectsQuery = client.query({
    query: GET_PROJECTS,
  });

  const responses = await Promise.all([homepageQuery, projectsQuery]);

  return {
    props: {
      homepage: responses[0]?.data?.page?.homepage,
      projects: responses[1]?.data?.projects?.nodes,
    },
    revalidate: 1,
  };
}
